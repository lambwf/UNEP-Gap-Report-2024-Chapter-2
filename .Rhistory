plot_country("SWE",data_ghg,data_crfs,data_indicators,2023)
# ggsave(plot_country("BRA",data_ghg,data_indicators,"yes"),filename = "test.png",path = "results/",device = "png",height = 4,width=8.5,dpi=300)
blarg <- left_join(data_ghg,cc_AU,by="iso") %>%
filter(AU==1) %>%
filter(year>=1990) %>%
group_by(sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)) %>%
mutate(iso="AU55") %>%
mutate(country="African Union")
View(blarg)
plot_country("AU55",blarg,data_crfs,data_indicators,2023)
data_countries <- blarg %>%
filter(iso==country_iso) %>%
filter(year>=1990) %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
### join LULUCF data if EU country (as these are not in Grassi's dataset)
if (sum(grepl(country_iso,cc_EU$iso))==1) {
data_crf_lulucf <- data_crfs %>%
filter(year>=1990) %>%
filter(iso==country_iso) %>%
filter(gas=="CO2 LULUCF") %>%
mutate(value=value/1e6) %>%
select(iso,country,year,value) %>%
mutate(sector_lv2="AFOLU: LULUCF") %>%
mutate(sector_lv2_colours="#a6d854") %>%
mutate(sector_lv2_order=8) %>%
mutate(sector_lv2_icons="C:/Users/lamw/ownCloud/Projects/UNEP Gap Report 2024/sources/icons/Land use.png")
data_countries <- rbind(data_countries,data_crf_lulucf)
data_countries$sector_lv2 <- fct_reorder(data_countries$sector_lv2,data_countries$sector_lv2_order)
}
## project missing LULUCF data
data_countries_lulucf <- spread(data_countries,year,value)
data_countries_lulucf <- gather(data_countries_lulucf,year,value,`1990`:`2023`) %>%
filter(sector_lv2=="AFOLU: LULUCF")
data_countries <- blarg %>%
filter(iso==country_iso) %>%
filter(year>=1990) %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
### join LULUCF data if EU country (as these are not in Grassi's dataset)
if (sum(grepl(country_iso,cc_EU$iso))==1) {
data_crf_lulucf <- data_crfs %>%
filter(year>=1990) %>%
filter(iso==country_iso) %>%
filter(gas=="CO2 LULUCF") %>%
mutate(value=value/1e6) %>%
select(iso,country,year,value) %>%
mutate(sector_lv2="AFOLU: LULUCF") %>%
mutate(sector_lv2_colours="#a6d854") %>%
mutate(sector_lv2_order=8) %>%
mutate(sector_lv2_icons="C:/Users/lamw/ownCloud/Projects/UNEP Gap Report 2024/sources/icons/Land use.png")
data_countries <- rbind(data_countries,data_crf_lulucf)
data_countries$sector_lv2 <- fct_reorder(data_countries$sector_lv2,data_countries$sector_lv2_order)
}
## project missing LULUCF data
data_countries_lulucf <- spread(data_countries,year,value)
data_countries <- blarg %>%
filter(iso==country_iso) %>%
filter(year>=1990) %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
country_iso="AU55"
data_countries <- blarg %>%
filter(iso==country_iso) %>%
filter(year>=1990) %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
### join LULUCF data if EU country (as these are not in Grassi's dataset)
if (sum(grepl(country_iso,cc_EU$iso))==1) {
data_crf_lulucf <- data_crfs %>%
filter(year>=1990) %>%
filter(iso==country_iso) %>%
filter(gas=="CO2 LULUCF") %>%
mutate(value=value/1e6) %>%
select(iso,country,year,value) %>%
mutate(sector_lv2="AFOLU: LULUCF") %>%
mutate(sector_lv2_colours="#a6d854") %>%
mutate(sector_lv2_order=8) %>%
mutate(sector_lv2_icons="C:/Users/lamw/ownCloud/Projects/UNEP Gap Report 2024/sources/icons/Land use.png")
data_countries <- rbind(data_countries,data_crf_lulucf)
data_countries$sector_lv2 <- fct_reorder(data_countries$sector_lv2,data_countries$sector_lv2_order)
}
## project missing LULUCF data
data_countries_lulucf <- spread(data_countries,year,value)
data_countries_lulucf <- gather(data_countries_lulucf,year,value,`1990`:`2023`) %>%
filter(sector_lv2=="AFOLU: LULUCF")
projection=2023-length(data_countries_lulucf$value[is.na(data_countries_lulucf$value)])
data_countries_lulucf <- data_countries_lulucf %>%
mutate(year=as.numeric(year)) %>%
arrange(year) %>%
na.locf()
data_countries <- rbind(data_countries %>% filter(sector_lv2!="AFOLU: LULUCF"),data_countries_lulucf)
data_countries <- data_countries %>% mutate(blarg=ifelse(sector_lv2=="AFOLU: LULUCF" & year>=projection,"0",NA))
data_countries$sector_lv2 <- fct_relevel(data_countries$sector_lv2,"AFOLU: LULUCF")
labels_colours <- data_ghg %>%
filter(iso=="CHN") %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
labels_colours <- data_ghg %>%
filter(iso=="CHN") %>%
group_by(iso,country,sector_lv2,sector_lv2_colours,sector_lv2_order,sector_lv2_icons,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e6)
labels_colours$sector_lv2 <- fct_relevel(labels_colours$sector_lv2,"AFOLU: LULUCF")
labels_colours <- labels_colours %>%
ungroup() %>%
filter(year==2021) %>%
arrange((sector_lv2)) %>%
mutate(position=1) %>%
mutate(position=cumsum(position)) %>%
select(-value)
labels_colours <- left_join(labels_colours,data_countries %>%
ungroup() %>%
filter(year==pull_out_year) %>%
select(sector_lv2,value),by="sector_lv2")
## calculate % share in pull out year relative to gross emissions
country_total <- data_countries %>%
filter(year==pull_out_year) %>%
filter(value>0)
labels_colours <- labels_colours %>%
mutate(total=sum(country_total$value)) %>%
mutate(share=value/total) %>%
mutate(share=round(share*100)) %>%
mutate(share=ifelse(share<0,NA,share)) %>%
mutate(label=paste0(share,"% "))
labels_colours$label <- gsub("NA%"," - ",labels_colours$label)
data_countries_crfs=data_crfs %>%
filter(year>=1990) %>%
filter(iso==country_iso) %>%
filter(gas!="CO2 LULUCF") %>%
group_by(iso,country,year) %>%
summarise(value=sum(value,na.rm=T)/1e6)
is_crf <- ifelse(!is.na(data_countries_crfs$iso[1]),"T","F")
indicator_text <- data_indicators %>% filter(iso==country_iso)
indicator_text = paste0(data_countries$country[1]," released an estimated ",indicator_text$ghg_total[1]," MtCO2e in 2023 (excl. LULUCF), a change of ",indicator_text$change_rel[1]," % compared to the previous year. Per capita GHG emissions were ",indicator_text$ghg_per_capita[1], " tCO2e in 2023. Cumulative CO2 emissions since 1850 were ",indicator_text$co2_historic[1]," GtCO2, or about ",indicator_text$co2_historic_fraction[1], "% of global emissions to date. LULUCF data are projected forward from ",projection,".")
p1 <- ggplot() +
geom_area(data=data_countries %>% filter(year<=projection),color="#636363",aes(x=year,y=value,fill=sector_lv2)) +
geom_area(data=data_countries %>% filter(year>=projection),color="#636363",aes(x=year,y=value,fill=sector_lv2,alpha=blarg)) +
{if(is_crf) geom_path(data=data_countries_crfs,
inherit.aes=FALSE,
aes(x=year,y=value,group=iso),
size=0.75,
color='#525252')} +
#geom_vline(aes(xintercept=pull_out_year),linetype="dashed") +
theme_wl() +
scale_fill_manual(values = labels_colours$sector_lv2_colours,limits = levels(labels_colours$sector_lv2)) +
scale_alpha_discrete(range=c("0"=0.5,"1"=1)) +
scale_x_continuous(breaks=c(1990,2000,2010,2020)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.spacing = unit(0.5,"cm"),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
plot.subtitle = element_text(size=11)) +
labs(title=data_countries$country,
subtitle=bquote("Greenhouse gas emissions (Mt" *CO[2]* "e/year)"),
caption=str_wrap(paste0(indicator_text,"\nSources: EDGAR v9, GCB 2023, UNFCCC, Grassi et al. 2021"),125))
p2 <- data_countries %>%
filter(year==pull_out_year) %>%
ggplot(aes(x=as.factor(year),y=value,fill=sector_lv2,alpha=blarg)) +
geom_col(color="#636363") +
theme_wl() +
ylim(layer_scales(p1)$y$range$range) +
scale_fill_manual(values = labels_colours$sector_lv2_colours,
limits = levels(labels_colours$sector_lv2)) +
scale_alpha_discrete(range=c("0"=0.5,"1"=1)) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.spacing = unit(0.5,"cm"),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
plot.background = element_blank())
labels_colours <- labels_colours %>%
arrange(sector_lv2_order)
p3 <- labels_colours %>%
arrange(sector_lv2_order) %>%
ggplot(.,aes(y=rev(sector_lv2_order))) +
geom_text(aes(x=1.9,label=label),color='#636363') +
geom_point(aes(x=2.1,fill=as.factor(rev(sector_lv2_order))),
shape=22,size=4,color='#636363') +
{if(is_crf) geom_line(data=data.frame(x=c(2.05,2.15),y=c(0,0)),
inherit.aes=FALSE,
aes(x=x,y=y),
color='#525252',size=1)} +
geom_image(aes(x=2.375+ifelse(sector_lv2=="AFOLU: LULUCF",str_length(sector_lv2)+3,str_length(sector_lv2))/26,image=sector_lv2_icons),by = "height",size=0.06)+
geom_text(hjust=0,aes(x=2.2,label=sector_lv2),color='#636363',vjust=0.5) +
{if(is_crf) geom_text(data=data.frame(label="Inventory (excl. LULUCF)"),
inherit.aes=FALSE,
aes(x=2.2,y=0,label=label),
color='#636363',vjust=0.5,hjust=0)} +
theme_wl() +
scale_fill_manual(values = rev(labels_colours$sector_lv2_colours)) +
scale_x_continuous(limits=c(1.8,3.5),expand = c(0,0)) +
scale_y_continuous(limits=c(-0.5,9.5),expand = c(0,0)) +
theme(axis.title = element_blank(),
panel.border = element_blank(),
legend.position="none",
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
plot.title.position = "plot",
plot.title = element_text(size=11,colour='#bdbdbd',hjust=1,face = "plain"),
plot.background = element_blank(),
plot.margin = unit(c(0,0,0,0),"cm"),
axis.text = element_text(size=10.5),
plot.subtitle = element_text(size=11)) +
labs(subtitle=paste0("Sectors & shares of gross emissions in ",pull_out_year))
p <-  wrap_elements(p1 + p2 + plot_layout(widths=c(7,1))) + plot_spacer() +
wrap_elements(plot_spacer() / p3 / plot_spacer() + plot_layout(heights=c(0.5,10,ifelse(is_crf=="T",1.75,1))) & theme(plot.backgroun=element_blank())) +
plot_layout(widths=c(6,-0.25,3.8))
p
ggsave(p,filename = "African Union.png",path = "results/countries",device = "png",height = 4,width=9,dpi=300)
ggsave(p,filename = "African Union.pdf",path = "results/countries",device = "pdf",height = 4,width=9)
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
library(tidyverse)
library(openxlsx)
library(countrycode)
library(ggrepel)
library(patchwork)
library(zoo)
library(RColorBrewer)
library(WDI)
library(labelled)
library(grid)
library(ggimage)
source("https://raw.githubusercontent.com/lambwf/Codebase/main/figure_style.R")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/reshape_with_labels.R")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/locate_shares.R")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/load_gcb_countries_v2023.R")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/load_edgar_v9.R")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/growth_rate.R")
edgar_co2  <- read.xlsx("sources/not public/EDGAR_2024_CO2_1970_2023_v2.xlsx",sheet=2,startRow=9)
edgar_ch4  <- read.xlsx("sources/not public/EDGAR_2024_CH4_1970_2023_v2.xlsx",sheet=2,startRow = 9)
edgar_n2o  <- read.xlsx("sources/not public/EDGAR_2024_N2O_1970_2023_v2.xlsx",sheet=2,startRow = 9)
edgar_fgas <- read.xlsx("sources/not public/EDGAR_2024_F-gases_1970_2023_v2.xlsx",sheet=2,startRow = 9)
data_ghg   <- load_edgar(edgar_co2,edgar_ch4,edgar_n2o,edgar_fgas)
## Load global warming potentials (GWPs) to calculate CO2e for each gas
gwps <- read.csv("https://raw.githubusercontent.com/openclimatedata/globalwarmingpotentials/main/globalwarmingpotentials.csv",skip = 10)
gwps <- gwps %>% select(gas=Species,gwp100=AR6GWP100)
## Join GWPs
data_ghg$gas <- gsub("-","",data_ghg$gas)
data_ghg <- left_join(data_ghg,gwps) %>%
mutate(gwp100=ifelse(gas=="CO2",1,gwp100))
check <- data_ghg %>% filter(is.na(gwp100))
check <- data_ghg %>% select(gas,gwp100) %>% distinct()
View(check)
edgar_co2  <- read.xlsx("sources/not public/EDGAR_2024_CO2_1970_2023_v2.xlsx",sheet=2,startRow=9)
edgar_ch4  <- read.xlsx("sources/not public/EDGAR_2024_CH4_1970_2023_v2.xlsx",sheet=2,startRow = 9)
edgar_n2o  <- read.xlsx("sources/not public/EDGAR_2024_N2O_1970_2023_v2.xlsx",sheet=2,startRow = 9)
edgar_fgas <- read.xlsx("sources/not public/EDGAR_2024_F-gases_1970_2023_v2.xlsx",sheet=2,startRow = 9)
data_ghg   <- load_edgar(edgar_co2,edgar_ch4,edgar_n2o,edgar_fgas)
## Remove biogenic CO2 as these emissions are normally accounted in equilibrium with removals
data_ghg <- data_ghg %>% filter(gas!="CO2bio")
## Load global warming potentials (GWPs) to calculate CO2e for each gas
gwps <- read.csv("https://raw.githubusercontent.com/openclimatedata/globalwarmingpotentials/main/globalwarmingpotentials.csv",skip = 10)
gwps <- gwps %>% select(gas=Species,gwp100=AR6GWP100)
## Join GWPs
data_ghg$gas <- gsub("-","",data_ghg$gas)
data_ghg <- left_join(data_ghg,gwps) %>%
mutate(gwp100=ifelse(gas=="CO2",1,gwp100))
## Check that all gwps joined
check <- data_ghg %>% filter(is.na(gwp100))
check <- data_ghg %>% select(gas,gwp100) %>% distinct()
## Calculate CO2e for each gas
data_ghg <- data_ghg %>% mutate(value_gwp=value*gwp100)
list_fgases <- data_ghg %>%
select(gas) %>%
distinct() %>%
mutate(group=ifelse(gas=="CO2","CO2 Fossil",NA)) %>%
mutate(group=ifelse(gas=="CH4","CH4",group)) %>%
mutate(group=ifelse(gas=="N2O","N2O",group)) %>%
mutate(group=ifelse(is.na(group),"F-gases",group))
View(list_fgases)
data_ghg <- left_join(data_ghg,list_fgases,by="gas")
View(data_ghg)
data_ghg <- data_ghg %>%
mutate(gas=group) %>%
group_by(iso,country,code,code_description,gas,year) %>%
summarise(value=sum(value_gwp,na.rm=TRUE))
data_ghg$value = data_ghg$value*1000
data_ghg <- data_ghg %>%
group_by(code,code_description,gas,year) %>%
summarise(value=sum(value,na.rm=TRUE))
View(data_ghg)
check <- data_ghg %>% filter(year==2023) %>% group_by(gas) %>% summarise(value=sum(value,na.rm=T))
View(check)
sum(check$value)
data_gcb_co2_luc <- load_gcb_countries_luc(
readxl::read_xlsx('sources/National_LandUseChange_Carbon_Emissions_2023v1.0.xlsx',range="A8:GT182",sheet=2),
readxl::read_xlsx('sources/National_LandUseChange_Carbon_Emissions_2023v1.0.xlsx',range="A8:GT182",sheet=3),
readxl::read_xlsx('sources/National_LandUseChange_Carbon_Emissions_2023v1.0.xlsx',range="A8:GT182",sheet=4))
data_gcb_co2_luc <- data_gcb_co2_luc %>%
filter(year>=1970) %>%
filter(country=="Global") %>%
select(year,value=mean) %>%
mutate(year=as.numeric(year)) %>%
mutate(value=value*1e9)
data_gcb_co2_luc <- data_gcb_co2_luc %>%
add_row(year=2023,value=1.1*(44/12)*1e9)
data_gcb_co2_luc <- data_gcb_co2_luc %>%
mutate(code="3B") %>%
mutate(code_description="Land use change") %>%
mutate(gas="CO2 LULUCF")
data_ghg <- rbind(data_ghg,data_gcb_co2_luc)
data_gcb_co2_cc <- read.xlsx('sources/Global_Carbon_Budget_2023v1.1.xlsx',sheet=2,startRow = 22,cols=c(1,7))
data_gcb_co2_cc <- data_gcb_co2_cc %>%
rename(year=Year,value=cement.carbonation.sink) %>%
mutate(value=-(value*(44/12)*1e9)) %>%
mutate(code="2.A.1.X") %>%
mutate(code_description="Cement carbonation") %>%
mutate(gas="CO2 Fossil")
data_gcb_co2_cc <- read.xlsx('sources/Global_Carbon_Budget_2023v1.1.xlsx',sheet=2,startRow = 22,cols=c(1,7))
data_gcb_co2_cc <- data_gcb_co2_cc %>%
rename(year=Year,value=cement.carbonation.sink) %>%
mutate(value=-(value*(44/12)*1e9)) %>%
mutate(code="2.A.1.X") %>%
mutate(code_description="Cement carbonation") %>%
mutate(gas="CO2 Fossil")
data_ghg <- rbind(data_ghg,data_gcb_co2_cc)
data_gfed_ch4 <- read.xlsx("sources/GFED4.1s_2024.xlsx",sheet="GFED_CH4",rows = c(14,105,122))
data_gfed_ch4 <- gather(data_gfed_ch4,year,value,`1997`:`2023`)
data_gfed_ch4 <- data_gfed_ch4 %>%
group_by(year) %>%
summarise(value=sum(value))
data_gfed_ch4 <- data_gfed_ch4 %>%
mutate(var="CH4") %>%
select(year,var,value) %>%
mutate(value=value*1E10) %>% #1e10 grams to grams
mutate(value=value/1e6) %>%
mutate(value=value/1e6) %>%
mutate(source="GFED v4.1*") %>%
mutate(units="MtCH4") %>%
select(year,value,source,var,units)
data_gfed_n2o <- read.xlsx("sources/GFED4.1s_2024.xlsx",sheet="GFED_N2O",rows = c(14,105,122))
data_gfed_n2o <- gather(data_gfed_n2o,year,value,`1997`:`2023`)
data_gfed_n2o <- data_gfed_n2o %>%
group_by(year) %>%
summarise(value=sum(value))
data_gfed_n2o <- data_gfed_n2o %>%
mutate(var="N2O") %>%
mutate(value=value*1E9) %>% #1e9 grams to grams
mutate(value=value/1e6) %>%
mutate(value=value/1e6) %>%
mutate(source="GFED v4.1*") %>%
mutate(units="MtN2O") %>%
select(year,value,source,var,units)
data_gfed <- rbind(data_gfed_ch4,data_gfed_n2o)
data_gfed <- left_join(data_gfed,gwps,by=c("var"="gas"))
data_gfed <- data_gfed %>%
filter(year>=1970) %>%
mutate(value=value*gwp100) %>%
mutate(value=value*1e6)
data_gfed <- rbind(data_gfed_ch4,data_gfed_n2o)
data_gfed <- left_join(data_gfed,gwps,by=c("var"="gas"))
data_gfed <- data_gfed %>%
filter(year>=1970) %>%
mutate(value=value*gwp100) %>%
mutate(value=value*1e6)
data_gfed <- data_gfed %>%
select(year,value,gas=var) %>%
mutate(code="3X") %>%
mutate(code_description="Fires") %>%
mutate(year=as.numeric(year))
data_ghg <- rbind(data_ghg,data_gfed)
write.xlsx(data_ghg %>% ungroup() %>% select(code,code_description) %>% distinct() %>% arrange(code),"cc_sectors.xlsx")
write.xlsx(data_ghg %>% ungroup() %>% select(code,code_description) %>% distinct() %>% arrange(code),"cc_sectors.xlsx")
data_ghg <- left_join(data_ghg,read.xlsx("sources/cc_sectors.xlsx"),by=join_by(code, code_description))
data_ghg$gas <- as.factor(data_ghg$gas)
data_ghg$gas <- fct_relevel(data_ghg$gas,"CO2 Fossil","CO2 LULUCF","CH4","N2O","F-gases")
data_ghg$sector_lv1 <- as.factor(data_ghg$sector_lv1)
data_ghg$sector_lv1 <- fct_reorder(data_ghg$sector_lv1,data_ghg$sector_lv1_order)
data_ghg$sector_lv2 <- as.factor(data_ghg$sector_lv2)
data_ghg$sector_lv2 <- fct_reorder(data_ghg$sector_lv2,data_ghg$sector_lv2_order)
data_ghg$sector_lv3 <- as.factor(data_ghg$sector_lv3)
data_ghg$sector_lv3 <- fct_reorder(data_ghg$sector_lv3,data_ghg$sector_lv3_order)
plot_ghgs <- data_ghg %>%
#filter(code_description!="Cement carbonation") %>%
filter(year>=1990) %>%
group_by(gas,year) %>%
summarise(value=sum(value,na.rm=TRUE)/1e9)
plot_ghgs_totals <- plot_ghgs %>%
group_by(year) %>%
summarise(totals=sum(value))
plot_ghgs %>% ggplot(aes(x=year,y=value,fill=fct_rev(gas))) +
geom_area(color="#636363") +
geom_line(inherit.aes = FALSE,
data=line_data,aes(x=x,y=y,group=x),
alpha=0.3,linetype="dashed") +
geom_text(inherit.aes = FALSE,
data=plot_ghgs_totals %>% filter(year %in% c(1990,2000,2010,2020,2023)),
aes(x=year,y=63,label=paste(signif(totals,3))),
size=3.5,colour="#252525") +
ylab("GHG Emissions (GtCO2e/year)") +
scale_fill_manual(values=c("#e78ac3","#fc8d62","#8da0cb","#66c2a5","#a6d854")) +
scale_x_continuous(breaks=c(1990,2000,2010,2020,2023)) +
theme_wl() +
theme(axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
legend.position = "right",
legend.title = element_blank())
line_data <- data.frame(x=c(1990,1990,2000,2000,2010,2010,2020,2020,2023,2023),y=c(0,60))
plot_ghgs %>% ggplot(aes(x=year,y=value,fill=fct_rev(gas))) +
geom_area(color="#636363") +
geom_line(inherit.aes = FALSE,
data=line_data,aes(x=x,y=y,group=x),
alpha=0.3,linetype="dashed") +
geom_text(inherit.aes = FALSE,
data=plot_ghgs_totals %>% filter(year %in% c(1990,2000,2010,2020,2023)),
aes(x=year,y=63,label=paste(signif(totals,3))),
size=3.5,colour="#252525") +
ylab("GHG Emissions (GtCO2e/year)") +
scale_fill_manual(values=c("#e78ac3","#fc8d62","#8da0cb","#66c2a5","#a6d854")) +
scale_x_continuous(breaks=c(1990,2000,2010,2020,2023)) +
theme_wl() +
theme(axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
legend.position = "right",
legend.title = element_blank())
plot_ghgs %>% ggplot(aes(x=year,y=value,fill=fct_rev(gas))) +
geom_area(color="#636363") +
geom_line(inherit.aes = FALSE,
data=line_data,aes(x=x,y=y,group=x),
alpha=0.3) +
geom_text(inherit.aes = FALSE,
data=plot_ghgs_totals %>% filter(year %in% c(1990,2000,2010,2020,2023)),
aes(x=year,y=63,label=paste(signif(totals,3))),
size=3.5,colour="#252525") +
ylab("GHG Emissions (GtCO2e/year)") +
scale_fill_manual(values=c("#e78ac3","#fc8d62","#8da0cb","#66c2a5","#a6d854")) +
scale_x_continuous(breaks=c(1990,2000,2010,2020,2023)) +
theme_wl() +
theme(axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
legend.position = "right",
legend.title = element_blank())
plot_ghgs %>% ggplot(aes(x=year,y=value,fill=fct_rev(gas))) +
geom_area(color="#636363") +
geom_line(inherit.aes = FALSE,
data=line_data,aes(x=x,y=y,group=x),
alpha=0.3,linetype="dashed") +
geom_text(inherit.aes = FALSE,
data=plot_ghgs_totals %>% filter(year %in% c(1990,2000,2010,2020,2023)),
aes(x=year,y=63,label=paste(signif(totals,3))),
size=3.5,colour="#252525") +
ylab("GHG Emissions (GtCO2e/year)") +
scale_fill_manual(values=c("#e78ac3","#fc8d62","#8da0cb","#66c2a5","#a6d854")) +
scale_x_continuous(breaks=c(1990,2000,2010,2020,2023)) +
theme_wl() +
theme(axis.title.x = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
legend.position = "right",
legend.title = element_blank())
plot_ghgs %>% ggplot(aes(x=year,y=value,fill=fct_rev(gas))) +
geom_area(color="#636363") +
geom_line(inherit.aes = FALSE,
data=line_data,aes(x=x,y=y,group=x),
alpha=0.3,linetype="dashed") +
geom_text(inherit.aes = FALSE,
data=plot_ghgs_totals %>% filter(year %in% c(1990,2000,2010,2020,2023)),
aes(x=year,y=63,label=paste(signif(totals,3))),
size=3.5,colour="#252525") +
ylab("GHG Emissions (GtCO2e/year)") +
scale_fill_manual(values=c("#e78ac3","#fc8d62","#8da0cb","#66c2a5","#a6d854")) +
scale_x_continuous(breaks=c(1990,2000,2010,2020,2023)) +
theme_wl() +
theme(axis.title.x = element_blank(),
axis.line.x=element_line(colour='#636363'),
axis.line.y=element_line(colour='#636363'),
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
legend.position = "right",
legend.title = element_blank())
install.packages('flexdashboard')
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
update.packages('htmltools')
install.packages(c("aplot", "backports", "BiocManager", "brio", "broom", "bslib", "cachem", "callr", "checkmate", "cli", "colorspace", "corrplot", "countrycode", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "downlit", "dplyr", "DT", "emmeans", "estimability", "evaluate", "FactoMineR", "fansi", "farver", "fastmap", "fs", "gert", "ggfun", "ggpattern", "ggplot2", "ggrepel", "ggsci", "gh", "glue", "gridpattern", "gtable", "highr", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "igraph", "knitr", "leaps", "lme4", "lubridate", "magick", "markdown", "minqa", "munsell", "mvtnorm", "nloptr", "openssl", "openxlsx", "patchwork", "pbkrtest", "pkgbuild", "pkgdown", "pkgload", "polyclip", "processx", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "s2", "sass", "scatterpie", "sf", "shiny", "SparseM", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "stringr", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vegan", "waldo", "withr", "wk", "xfun", "xopen", "yaml", "yulab.utils", "zip"))
install.packages(c("aplot", "backports", "BiocManager", "brio", "broom", "bslib", "cachem", "callr", "checkmate", "cli", "colorspace", "corrplot", "countrycode", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "downlit", "dplyr", "DT", "emmeans", "estimability", "evaluate", "FactoMineR", "fansi", "farver", "fastmap", "fs", "gert", "ggfun", "ggpattern", "ggplot2", "ggrepel", "ggsci", "gh", "glue", "gridpattern", "gtable", "highr", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "igraph", "knitr", "leaps", "lme4", "lubridate", "magick", "markdown", "minqa", "munsell", "mvtnorm", "nloptr", "openssl", "openxlsx", "patchwork", "pbkrtest", "pkgbuild", "pkgdown", "pkgload", "polyclip", "processx", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "s2", "sass", "scatterpie", "sf", "shiny", "SparseM", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "stringr", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vegan", "waldo", "withr", "wk", "xfun", "xopen", "yaml", "yulab.utils", "zip"))
install.packages(c("aplot", "backports", "BiocManager", "brio", "broom", "bslib", "cachem", "callr", "checkmate", "cli", "colorspace", "corrplot", "countrycode", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "digest", "downlit", "dplyr", "DT", "emmeans", "estimability", "evaluate", "FactoMineR", "fansi", "farver", "fastmap", "fs", "gert", "ggfun", "ggpattern", "ggplot2", "ggrepel", "ggsci", "gh", "glue", "gridpattern", "gtable", "highr", "Hmisc", "htmlTable", "htmltools", "httpuv", "httr2", "igraph", "knitr", "leaps", "lme4", "lubridate", "magick", "markdown", "minqa", "munsell", "mvtnorm", "nloptr", "openssl", "openxlsx", "patchwork", "pbkrtest", "pkgbuild", "pkgdown", "pkgload", "polyclip", "processx", "promises", "ps", "purrr", "quantreg", "ragg", "Rcpp", "RcppEigen", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "s2", "sass", "scatterpie", "sf", "shiny", "SparseM", "spatstat", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.linnet", "spatstat.model", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringi", "stringr", "systemfonts", "testthat", "textshaping", "tidyr", "timechange", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vegan", "waldo", "withr", "wk", "xfun", "xopen", "yaml", "yulab.utils", "zip"))
update.packages('xfun')
help(package="xfun")
install.packages('xfun')
install.packages('htmltools')
install.packages("htmltools")
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools", lib="C:/Program Files/R/R-4.3.0/library")
